type Query {
  posts: [Post!]!
  postById(id: Int!): Post
  comments(postId: Int!): [Comment!]!
  users: [User!]!
  userById(id: Int!): User

  clubs: [Club!]!
  clubById(id: Int!): Club

  topics: [Topic!]!
  topicById(id: Int!): Topic
  commentsByTopicId(topicId: Int!): [Comment!]!
}

type Mutation {
  createPost(input: CreatePostInput!): Post!
  updatePost(id: Int!, input: UpdatePostInput!): Post!
  deletePost(id: Int!): Boolean!
  likePost(id: Int!): Post!

  createComment(input: CreateCommentInput!): Comment!
  likeComment(id: Int!): Comment!
  replyToComment(commentId: Int!, input: CreateCommentInput!): Comment!

  updateUser(id: Int!, input: UpdateUserInput!): User!

  joinClub(clubId: Int!): Club!
  leaveClub(clubId: Int!): Club!
  createClub(input: CreateClubInput!): Club!
  updateClub(id: Int!, input: UpdateClubInput!): Club!
  deleteClub(id: Int!): Boolean!
  assignAdmin(clubId: Int!, userId: Int!): Club!

  createEvent(clubId: Int!, input: CreateEventInput!): Event!
  updateEvent(id: Int!, input: UpdateEventInput!): Event!
  deleteEvent(id: Int!): Boolean!

  createTopic(input: CreateTopicInput!): Topic!
  updateTopic(id: Int!, input: UpdateTopicInput!): Topic!
  deleteTopic(id: Int!): Boolean!
  likeTopic(id: Int!): Topic!
  updateComment(id: Int!, input: UpdateCommentInput!): Comment!
  deleteComment(id: Int!): Boolean!
}

type Topic {
  id: Int!
  title: String!
  content: String!
  imageURL: String
  author: User!  # Заменили authorId на author
  createdAt: String!
  updatedAt: String
  likes: Int!
  comments: [Comment!]!
}

input CreateTopicInput {
  title: String!
  content: String!
  imageURL: String  # Добавлено поле imageURL
}

input UpdateTopicInput {
  title: String
  content: String
  imageURL: String  # Добавлено поле imageURL
}

type Club {
  id: Int!
  name: String!
  description: String!
  imageURL: String
  creator: User!
  createdAt: String!
  members: [User!]!
  events: [Event!]!
  admins: [User!]!
}

input CreateClubInput {
  name: String!
  description: String!
  imageURL: String
}

input UpdateClubInput {
  name: String!
  description: String!
  imageURL: String
}

type Event {
  id: Int!
  title: String!
  description: String!
  imageURL: String  # Добавлено поле imageURL
  createdAt: String!
  date: String!
  clubId: Int!
}

input CreateEventInput {
  title: String!
  description: String!
  imageURL: String  # Добавлено поле imageURL
  date: String!
}

input UpdateEventInput {
  title: String
  description: String
  imageURL: String  # Добавлено поле imageURL
  date: String
}

type Post {
  id: Int!
  title: String!
  content: String!
  imageURL: String
  author: User!  # Заменили authorId на author
  createdAt: String!
  updatedAt: String
  likes: Int!
  comments: [Comment!]!
}

type Comment {
  id: Int!
  content: String!
  imageURL: String  # Добавлено поле imageURL
  entityId: Int!
  entityType: String!
  author: User!  # Заменили authorId на author
  parentId: Int
  createdAt: String!
  updatedAt: String
  likes: Int!
  replies: [Comment!]!
}

type User {
  id: Int!
  email: String!
  name: String!
  lastname: String!
  passwordHash: String!
  role: Role!
  imageURL: String
  additionalInformation: String
  course: Int
  createdAt: String!
  updatedAt: String
  major: String
  degree: String
  faculty: String
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

input CreatePostInput {
  title: String!
  content: String!
  imageURL: String
  authorId: Int!
}

input UpdatePostInput {
  title: String
  content: String
  imageURL: String
}

enum EntityType {
  post
  topic
  event
}

input CreateCommentInput {
  entityID: Int!
  entityType: EntityType!
  content: String!
  imageURL: String
  authorId: Int!
  parentId: Int
}

input UpdateCommentInput {
  content: String!
  imageURL: String  # Добавлено поле imageURL
  authorId: Int!
  parentId: Int
}

input CreateUserInput {
  email: String!
  name: String!
  lastname: String!
  password: String!
  role: Role!
  imageURL: String
  additionalInformation: String
  course: Int
  major: String
  degree: String
  faculty: String
}

input UpdateUserInput {
  email: String
  name: String
  lastname: String
  password: String
  role: Role
  imageURL: String
  additionalInformation: String
  course: Int
  major: String
  degree: String
  faculty: String
}

type AuthPayload {
  accessToken: String!
  refreshToken: String!
}

input RegisterInput {
  email: String!
  name: String!
  lastname: String!
  password: String!
}
