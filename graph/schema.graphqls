type Query {
  posts: [Post!]!
  postById(id: ID!): Post
  comments(postId: ID!): [Comment!]!
  users: [User!]!
  userById(id: ID!): User
}

type Mutation {
  createPost(input: CreatePostInput!): Post!
  updatePost(id: ID!, input: UpdatePostInput!): Post!
  deletePost(id: ID!): Boolean!
  likePost(id: ID!): Post!

  createComment(input: CreateCommentInput!): Comment!
  likeComment(id: ID!): Comment!
  replyToComment(commentId: ID!, input: CreateCommentInput!): Comment!

  createUser(input: CreateUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
}

type Post {
  id: ID!
  title: String!
  content: String!
  imageURL: String
  authorId: ID!
  createdAt: String!
  updatedAt: String
  likes: Int!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  content: String!
  authorId: ID!
  createdAt: String!
  likes: Int!
  replies: [Comment!]!
}

type User {
  id: ID!
  email: String!
  name: String!
  lastname: String!
  passwordHash: String!
  role: Role!
  imageURL: String
  additionalInformation: String
  course: Int
  major: String
  degree: String
  faculty: String
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

input CreatePostInput {
  title: String!
  content: String!
  imageURL: String
  authorId: ID!
}

input UpdatePostInput {
  title: String
  content: String
  imageURL: String
}

input CreateCommentInput {
  postId: ID!
  content: String!
  authorId: ID!
}

input CreateUserInput {
  email: String!
  name: String!
  lastname: String!
  password: String!  # hash
  role: Role!
  imageURL: String
  additionalInformation: String
  course: Int
  major: String
  degree: String
  faculty: String
}

input UpdateUserInput {
  email: String
  name: String
  lastname: String
  password: String  # hash
  role: Role
  imageURL: String
  additionalInformation: String
  course: Int
  major: String
  degree: String
  faculty: String
}
